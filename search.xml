<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客搭建教程</title>
    <url>/2020/08/13/Build-Your-Blog/</url>
    <content><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h3><p>建这个博客踩了好多坑QWQ</p>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h3><h4 id="1-1-安装Git和Node-js"><a href="#1-1-安装Git和Node-js" class="headerlink" title="1.1 安装Git和Node.js"></a>1.1 安装Git和Node.js</h4><p>这没什么好说的吧…</p>
<p>安装完成后打开cmd通过以下两行命令检测是否安装成功</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line">npm --version</span><br></pre></td></tr></table></figure></div>

<h4 id="1-2-更换国内镜像源"><a href="#1-2-更换国内镜像源" class="headerlink" title="1.2 更换国内镜像源"></a>1.2 更换国内镜像源</h4><p><del>如果您觉得网速够快可以选择跳过此步</del></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div>

<h4 id="1-3-安装Hexo"><a href="#1-3-安装Hexo" class="headerlink" title="1.3 安装Hexo"></a>1.3 安装Hexo</h4><p>上一步不做的话这一步会慢得让你怀疑人生</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure></div>

<h3 id="2-创建"><a href="#2-创建" class="headerlink" title="2 创建"></a>2 创建</h3><h4 id="2-1-创建本地Blog"><a href="#2-1-创建本地Blog" class="headerlink" title="2.1 创建本地Blog"></a>2.1 创建本地Blog</h4><p>新建一个空文件夹并进入</p>
<p>右键 -&gt; “Git Bash Here”</p>
<p>输入以下命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></div>

<h4 id="2-2-进行本地预览"><a href="#2-2-进行本地预览" class="headerlink" title="2.2 进行本地预览"></a>2.2 进行本地预览</h4><p>继续在命令行中输入下列代码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>

<p>之后进入打开浏览器<a class="link"   href="http://localhost:4000/" >http://localhost:4000 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>就可以查看自己的Blog了</p>
<h3 id="3-美化"><a href="#3-美化" class="headerlink" title="3 美化"></a>3 美化</h3><h4 id="3-1-下载主题"><a href="#3-1-下载主题" class="headerlink" title="3.1 下载主题"></a>3.1 下载主题</h4><p>在<a class="link"   href="https://github.com/" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中查找<a class="link"   href="https://github.com/search?q=hexo-theme&type=" >hexo-theme <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>选择一个自己喜欢的主题并clone或下载zip包解压到<strong>主目录&#x2F;themes</strong>中</p>
<h5 id="3-1-1-yilia"><a href="#3-1-1-yilia" class="headerlink" title="3.1.1 yilia"></a>3.1.1 yilia</h5><p>这里以<a class="link"   href="https://github.com/litten/hexo-theme-yilia" >yilia <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>为例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure></div>

<h5 id="3-1-2-Material"><a href="#3-1-2-Material" class="headerlink" title="3.1.2 Material"></a>3.1.2 Material</h5><blockquote>
<p>注意:使用Material主题最好用1.5.2版，最新版会一直报错</p>
</blockquote>
<p>这里以<a class="link"   href="https://github.com/bolnh/hexo-theme-material" >Material <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>为例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/viosey/hexo-theme-material.git material</span><br></pre></td></tr></table></figure></div>
<h5 id="3-1-3-Fluid"><a href="#3-1-3-Fluid" class="headerlink" title="3.1.3 Fluid"></a>3.1.3 Fluid</h5><blockquote>
<p>以下引用自<a class="link"   href="https://github.com/fluid-dev/hexo-theme-fluid" >Fluid官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-theme-fluid</span><br></pre></td></tr></table></figure></div>

<h4 id="3-2-使用主题"><a href="#3-2-使用主题" class="headerlink" title="3.2 使用主题"></a>3.2 使用主题</h4><h5 id="3-2-1-yilia"><a href="#3-2-1-yilia" class="headerlink" title="3.2.1 yilia"></a>3.2.1 yilia</h5><p>修改<strong>主目录</strong>下的 <code>_config.yml</code> 文件的 <code>theme</code>值为<code>yilia</code>。</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">yilia</span></span><br></pre></td></tr></table></figure></div>

<p>复制 <strong>themes&#x2F;yilia</strong> 目录下<code>_config.template.yml</code> 为 <code>_config.yml</code></p>
<h5 id="3-2-2-Material"><a href="#3-2-2-Material" class="headerlink" title="3.2.2 Material"></a>3.2.2 Material</h5><p>修改<strong>主目录</strong>下的 <code>_config.yml</code> 文件的 <code>theme</code>值为<code>material</code>。</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">material</span></span><br></pre></td></tr></table></figure></div>

<p>复制 <strong>themes&#x2F;material</strong> 目录下<code>_config.template.yml</code> 为 <code>_config.yml</code></p>
<h5 id="3-2-3-Fluid"><a href="#3-2-3-Fluid" class="headerlink" title="3.2.3 Fluid"></a>3.2.3 Fluid</h5><p>修改<strong>主目录</strong>下的 <code>_config.yml</code> 文件的 <code>theme</code>值为<code>fluid</code>。</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">fluid</span></span><br></pre></td></tr></table></figure></div>

<p>然后在博客目录下创建 _config.fluid.yml，将主题的 _config.yml 内容复制进去。</p>
<h4 id="3-3-更改语言"><a href="#3-3-更改语言" class="headerlink" title="3.3 更改语言"></a>3.3 更改语言</h4><p>修改<strong>主目录</strong>下的 <code>_config.yml</code> 文件的 <code>language</code>值为<code>zh-CN</code>。</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure></div>

<h4 id="3-4-站内搜索"><a href="#3-4-站内搜索" class="headerlink" title="3.4 站内搜索"></a>3.4 站内搜索</h4><h5 id="3-4-1-yilia-Material"><a href="#3-4-1-yilia-Material" class="headerlink" title="3.4.1 yilia &#x2F; Material"></a>3.4.1 yilia &#x2F; Material</h5><p>安装 <a class="link"   href="https://link.jianshu.com/?t=https://github.com/PaicHyperionDev/hexo-generator-search" >hexo-generator-search <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 插件。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></div>

<p>修改<strong>theme&#x2F;主题名</strong> 目录 <code>_config.yml</code> 中的 search值</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">swiftype_key:</span> </span><br></pre></td></tr></table></figure></div>

<p>然后在<strong>主目录</strong>的<code>_config.yml</code>文件中添加</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">    <span class="attr">field:</span> <span class="string">all</span></span><br></pre></td></tr></table></figure></div>

<h5 id="3-4-2-Fluid"><a href="#3-4-2-Fluid" class="headerlink" title="3.4.2 Fluid"></a>3.4.2 Fluid</h5><p>修改<strong>主目录</strong>的 <code>_config.fluid.yml</code> 中的 search值</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span></span><br><span class="line"><span class="comment"># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span></span><br><span class="line">  <span class="comment"># Path for search index file, it can be a relative path or an absolute path</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/local-search.xml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 文件生成在本地的位置，必须是相对路径</span></span><br><span class="line">  <span class="comment"># The location where the index file is generated locally, it must be a relative location</span></span><br><span class="line">  <span class="attr">generate_path:</span> <span class="string">/local-search.xml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 搜索的范围</span></span><br><span class="line">  <span class="comment"># Search field</span></span><br><span class="line">  <span class="comment"># Options: post | page | all</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 搜索是否扫描正文</span></span><br><span class="line">  <span class="comment"># If true, search will scan the post content</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-部署"><a href="#4-部署" class="headerlink" title="4 部署"></a>4 部署</h3><p>到前一步本地的博客基本上就建好了，接下来就是将其部署在服务器上</p>
<h4 id="4-1-连接Git仓库"><a href="#4-1-连接Git仓库" class="headerlink" title="4.1 连接Git仓库"></a>4.1 连接Git仓库</h4><p>首先在<a class="link"   href="https://github.com/" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>注册一个账号,建立<code>用户名.github.io</code>的项目</p>
<p>接着打开Git Bash，输入下列命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;注册邮箱&quot;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="4-2-添加密钥"><a href="#4-2-添加密钥" class="headerlink" title="4.2 添加密钥"></a>4.2 添加密钥</h4><p>在Git Bash中继续输入下列命令生成SSH密钥</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;注册邮箱&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>查看密钥</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></div>

<p>将输出的内容复制到<a class="link"   href="https://github.com/settings/keys" >SSH and GPG keys <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>里</p>
<h4 id="4-3-提交部署"><a href="#4-3-提交部署" class="headerlink" title="4.3 提交部署"></a>4.3 提交部署</h4><p>安装<code>hexo-deployer-git</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<p>配置<strong>主目录</strong>的<code>_config.yml</code>文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></div>

<p>部署到<a class="link"   href="https://github.com/" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<p>访问<a class="link"   href="https://用户名.github.io/" >https:&#x2F;&#x2F;用户名.github.io&#x2F; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言获得Cravatar头像服务网址</title>
    <url>/2023/09/30/Go-use-cravatar/</url>
    <content><![CDATA[<p><del>Cravatar真是个好东西</del></p>
<p>这是Cravatar图像请求的Go语言实现，具体的加密方式请查阅<a class="link"   href="https://cravatar.com/developer/api" >这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;crypto/md5&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// Hash值获取方式 先删除前导和尾随的空格，再将所有字符置为小写，最后进行MD5加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hash</span><span class="params">(email <span class="type">string</span>)</span></span> [<span class="number">16</span>]<span class="type">byte</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> md5.Sum([]<span class="type">byte</span>(strings.ToLower(strings.TrimFunc(email, <span class="function"><span class="keyword">func</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> r == <span class="string">&#x27; &#x27;</span></span><br><span class="line">    &#125;))))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 头像获取地址为 https://cravatar.cn/avatar/&#123;HASH&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EmailToCravatarURL</span><span class="params">(email <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;https://cravatar.cn/avatar/%x&quot;</span>, Hash(email))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 试试效果！</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Print(EmailToCravatarURL(&#123;Your email here&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>头像服务</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Navicat连接WSL里的MySQL服务</title>
    <url>/2023/08/02/How-to-use-Navicat-to-connect-to-MySQL-services-in-WSL/</url>
    <content><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h3><p>真的有人会干这么套娃的事情吗？</p>
<p><del>原来是我啊，那没事了</del></p>
<p>究其原因，还是由于之前技术不精，在Windows系统上安装MySQL，结果MySQL炸了，而且还没办法卸载干净，这次想着既然VSCode可以与WSL连接，为何Navicat不能与WSL里的MySQL连接呢？</p>
<p>而且照<a class="link"   href="https://github.com/XCloudFance" >XCloudFance <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>学长的说法：“你可以把WSL想象是里面的一台电脑，你的Windows也是一台独立的电脑”，那么navicat理论上应该可以与WSL中的MySQL连接。</p>
<p>于是，痛苦的两个小时配置之旅就开始了(中途还重装了一次WSL qwq)</p>
<h3 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1 前期准备"></a>1 前期准备</h3><h4 id="1-1-安装Navicat"><a href="#1-1-安装Navicat" class="headerlink" title="1.1 安装Navicat"></a>1.1 安装Navicat</h4><p>自行Baidu&#x2F;Google&#x2F;Bing下载安装包</p>
<p>安装包打开后一路next即可</p>
<h4 id="1-2-安装WSL"><a href="#1-2-安装WSL" class="headerlink" title="1.2 安装WSL"></a>1.2 安装WSL</h4><p>Baidu&#x2F;Google&#x2F;Bing</p>
<p>**注意:**记得将WSL版本设置为WSL2，本人使用的系统是Ubuntu22.04</p>
<h4 id="1-3-在WSL中安装MySQL"><a href="#1-3-在WSL中安装MySQL" class="headerlink" title="1.3 在WSL中安装MySQL"></a>1.3 在WSL中安装MySQL</h4><p>在WSL终端中输入</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure></div>

<p>即可，<code>root</code>及其余账户密码配置请自行百度</p>
<h3 id="2-正式开始吧！"><a href="#2-正式开始吧！" class="headerlink" title="2 正式开始吧！"></a>2 正式开始吧！</h3><h4 id="2-1-找到WSL的IP地址"><a href="#2-1-找到WSL的IP地址" class="headerlink" title="2.1 找到WSL的IP地址"></a>2.1 找到WSL的IP地址</h4><p>首先，我们应该让Windows主机能够访问WSL，那么我们就应该先知道WSL的本地IP访问地址。</p>
<p>在Windows下打开终端(Power Shell)，使用如下命令查询：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure></div>

<p>可以看到这样一行提示：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">以太网适配器 vEthernet (WSL):</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::85d4:3cdb:df1f:f6e1%42</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 172.30.224.1</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.240.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br></pre></td></tr></table></figure></div>

<p>说明主机其实是能够访问到WSL的。</p>
<p>在WSL的终端中，使用<code>ifconfig</code>查询本地IP地址</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure></div>

<p>有可能需要使用如下指令安装<code>net-tools</code>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure></div>

<p>安装成功后，运行<code>ifconfig</code>会输出类似下面的结果：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.30.224.99  netmask 255.255.240.0  broadcast 172.30.239.255</span><br><span class="line">        inet6 fe80::215:5dff:fe99:f76a  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:15:5d:99:f7:6a  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 104254  bytes 266388818 (266.3 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 69925  bytes 5218621 (5.2 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 5644  bytes 29799099 (29.7 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5644  bytes 29799099 (29.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></div>

<p>第二行的<code>172.30.224.99</code>便是你的WSL的本地IP地址。</p>
<h3 id="2-2-设置MySQL被局域网访问"><a href="#2-2-设置MySQL被局域网访问" class="headerlink" title="2.2 设置MySQL被局域网访问"></a>2.2 设置MySQL被局域网访问</h3><p>这时我们可以试着用Navicat连接一下刚才获得IP地址的WSL的MySQL服务，发现Navicat显示连接失败，这是因为我们未设置MySQL能被局域网访问。</p>
<p>进入MySQL中，修改账户的访问权限：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p &lt;password&gt;</span><br><span class="line">mysql-&gt;use mysql</span><br><span class="line">mysql-&gt;update user set host = &#x27;%&#x27; where user =&#x27;root&#x27;;</span><br><span class="line">mysql-&gt;grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; with grant option;</span><br><span class="line">mysql-&gt;flush privileges;</span><br><span class="line">mysql-&gt;exit;</span><br></pre></td></tr></table></figure></div>

<p>找到MySQL的配置文件进行修改:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></div>

<p>在<code>mysqld.cnf</code>中，找到这样一行配置：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure></div>

<p>修改为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind-address = 0.0.0.0</span><br></pre></td></tr></table></figure></div>

<p>保存后重启MySQL：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure></div>

<p>可以通过<code>netstat -aptn</code>检查MySQL的状态</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-设置Ubuntu防火墙"><a href="#2-3-设置Ubuntu防火墙" class="headerlink" title="2.3 设置Ubuntu防火墙"></a>2.3 设置Ubuntu防火墙</h3><p>此时我们还是无法连接，还需关闭Ubuntu的防火墙</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">enable</span> <span class="comment">#开启</span></span><br></pre></td></tr></table></figure></div>

<p>在WSL环境下，可能会得到如下提示：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;</span>, line 427, <span class="keyword">in</span> under_ssh</span><br><span class="line">    ppid = get_ppid(pid)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;</span>, line 421, <span class="keyword">in</span> get_ppid</span><br><span class="line">    <span class="built_in">return</span> int(ppid)</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> int() with base 10: <span class="string">&#x27;S&#x27;</span></span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/sbin/ufw&quot;</span>, line 138, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    not ui.continue_under_ssh():</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/frontend.py&quot;</span>, line 901, <span class="keyword">in</span> continue_under_ssh</span><br><span class="line">    <span class="keyword">if</span> self.backend.do_checks and ufw.util.under_ssh(): <span class="comment"># pragma: no cover</span></span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;</span>, line 457, <span class="keyword">in</span> under_ssh</span><br><span class="line">    <span class="built_in">return</span> under_ssh(ppid)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;</span>, line 457, <span class="keyword">in</span> under_ssh</span><br><span class="line">    <span class="built_in">return</span> under_ssh(ppid)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;</span>, line 457, <span class="keyword">in</span> under_ssh</span><br><span class="line">    <span class="built_in">return</span> under_ssh(ppid)</span><br><span class="line">  [Previous line repeated 1 more time]</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;</span>, line 434, <span class="keyword">in</span> under_ssh</span><br><span class="line">    raise ValueError(err_msg)</span><br><span class="line">ValueError: Couldn<span class="string">&#x27;t find parent pid for &#x27;</span>3129<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>这是因为<code>/usr/lib/python3/dist-packages/ufw/util.py</code>中有一行Python出现错误</p>
<p>更正方法是进入中：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/lib/python3/dist-packages/ufw/util.py</span><br></pre></td></tr></table></figure></div>

<p>将</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">ppid = <span class="built_in">open</span>(name).readlines()[<span class="number">0</span>].split(<span class="string">&#x27;)&#x27;</span>)[<span class="number">1</span>].split()[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>

<p>改为</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">ppid = <span class="built_in">open</span>(name).readlines()[<span class="number">0</span>].rsplit(<span class="string">&#x27;)&#x27;</span>,<span class="number">1</span>)[<span class="number">1</span>].split()[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>

<p>即可</p>
<p>之后添加允许访问的端口<code>3306</code>并重载生效即可</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 3306</span><br><span class="line">sudo ufw reload</span><br></pre></td></tr></table></figure></div>

<p>完成后查看</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure></div>

<p>得到如下结果即为成功</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Status: active</span><br><span class="line"></span><br><span class="line">To                         Action      From</span><br><span class="line">--                         ------      ----</span><br><span class="line">3306                       ALLOW       Anywhere</span><br><span class="line">3306 (v6)                  ALLOW       Anywhere (v6)</span><br></pre></td></tr></table></figure></div>

<p>这时再使用Navicat访问，即可连接上WSL的MySQL服务。</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
