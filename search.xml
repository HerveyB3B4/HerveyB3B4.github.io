<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客搭建教程</title>
    <url>/2020/08/13/Build-Your-Blog/</url>
    <content><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h3><p>建这个博客踩了好多坑QWQ</p>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h3><h4 id="1-1-安装Git和Node-js"><a href="#1-1-安装Git和Node-js" class="headerlink" title="1.1 安装Git和Node.js"></a>1.1 安装Git和Node.js</h4><p>这没什么好说的吧…</p>
<p>安装完成后打开cmd通过以下两行命令检测是否安装成功</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line">npm --version</span><br></pre></td></tr></table></figure></div>

<h4 id="1-2-更换国内镜像源"><a href="#1-2-更换国内镜像源" class="headerlink" title="1.2 更换国内镜像源"></a>1.2 更换国内镜像源</h4><p><del>如果您觉得网速够快可以选择跳过此步</del></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div>

<h4 id="1-3-安装Hexo"><a href="#1-3-安装Hexo" class="headerlink" title="1.3 安装Hexo"></a>1.3 安装Hexo</h4><p>上一步不做的话这一步会慢得让你怀疑人生</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure></div>

<h3 id="2-创建"><a href="#2-创建" class="headerlink" title="2 创建"></a>2 创建</h3><h4 id="2-1-创建本地Blog"><a href="#2-1-创建本地Blog" class="headerlink" title="2.1 创建本地Blog"></a>2.1 创建本地Blog</h4><p>新建一个空文件夹并进入</p>
<p>右键 -&gt; “Git Bash Here”</p>
<p>输入以下命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></div>

<h4 id="2-2-进行本地预览"><a href="#2-2-进行本地预览" class="headerlink" title="2.2 进行本地预览"></a>2.2 进行本地预览</h4><p>继续在命令行中输入下列代码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>

<p>之后进入打开浏览器<a class="link"   href="http://localhost:4000/" >http://localhost:4000 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>就可以查看自己的Blog了</p>
<h3 id="3-美化"><a href="#3-美化" class="headerlink" title="3 美化"></a>3 美化</h3><h4 id="3-1-下载主题"><a href="#3-1-下载主题" class="headerlink" title="3.1 下载主题"></a>3.1 下载主题</h4><p>在<a class="link"   href="https://github.com/" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中查找<a class="link"   href="https://github.com/search?q=hexo-theme&type=" >hexo-theme <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>选择一个自己喜欢的主题并clone或下载zip包解压到<strong>主目录&#x2F;themes</strong>中</p>
<h5 id="3-1-1-yilia"><a href="#3-1-1-yilia" class="headerlink" title="3.1.1 yilia"></a>3.1.1 yilia</h5><p>这里以<a class="link"   href="https://github.com/litten/hexo-theme-yilia" >yilia <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>为例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure></div>

<h5 id="3-1-2-Material"><a href="#3-1-2-Material" class="headerlink" title="3.1.2 Material"></a>3.1.2 Material</h5><blockquote>
<p>注意:使用Material主题最好用1.5.2版，最新版会一直报错</p>
</blockquote>
<p>这里以<a class="link"   href="https://github.com/bolnh/hexo-theme-material" >Material <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>为例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/viosey/hexo-theme-material.git material</span><br></pre></td></tr></table></figure></div>
<h5 id="3-1-3-Fluid"><a href="#3-1-3-Fluid" class="headerlink" title="3.1.3 Fluid"></a>3.1.3 Fluid</h5><blockquote>
<p>以下引用自<a class="link"   href="https://github.com/fluid-dev/hexo-theme-fluid" >Fluid官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-theme-fluid</span><br></pre></td></tr></table></figure></div>

<h4 id="3-2-使用主题"><a href="#3-2-使用主题" class="headerlink" title="3.2 使用主题"></a>3.2 使用主题</h4><h5 id="3-2-1-yilia"><a href="#3-2-1-yilia" class="headerlink" title="3.2.1 yilia"></a>3.2.1 yilia</h5><p>修改<strong>主目录</strong>下的 <code>_config.yml</code> 文件的 <code>theme</code>值为<code>yilia</code>。</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">yilia</span></span><br></pre></td></tr></table></figure></div>

<p>复制 <strong>themes&#x2F;yilia</strong> 目录下<code>_config.template.yml</code> 为 <code>_config.yml</code></p>
<h5 id="3-2-2-Material"><a href="#3-2-2-Material" class="headerlink" title="3.2.2 Material"></a>3.2.2 Material</h5><p>修改<strong>主目录</strong>下的 <code>_config.yml</code> 文件的 <code>theme</code>值为<code>material</code>。</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">material</span></span><br></pre></td></tr></table></figure></div>

<p>复制 <strong>themes&#x2F;material</strong> 目录下<code>_config.template.yml</code> 为 <code>_config.yml</code></p>
<h5 id="3-2-3-Fluid"><a href="#3-2-3-Fluid" class="headerlink" title="3.2.3 Fluid"></a>3.2.3 Fluid</h5><p>修改<strong>主目录</strong>下的 <code>_config.yml</code> 文件的 <code>theme</code>值为<code>fluid</code>。</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">fluid</span></span><br></pre></td></tr></table></figure></div>

<p>然后在博客目录下创建 _config.fluid.yml，将主题的 _config.yml 内容复制进去。</p>
<h4 id="3-3-更改语言"><a href="#3-3-更改语言" class="headerlink" title="3.3 更改语言"></a>3.3 更改语言</h4><p>修改<strong>主目录</strong>下的 <code>_config.yml</code> 文件的 <code>language</code>值为<code>zh-CN</code>。</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure></div>

<h4 id="3-4-站内搜索"><a href="#3-4-站内搜索" class="headerlink" title="3.4 站内搜索"></a>3.4 站内搜索</h4><h5 id="3-4-1-yilia-Material"><a href="#3-4-1-yilia-Material" class="headerlink" title="3.4.1 yilia &#x2F; Material"></a>3.4.1 yilia &#x2F; Material</h5><p>安装 <a class="link"   href="https://link.jianshu.com/?t=https://github.com/PaicHyperionDev/hexo-generator-search" >hexo-generator-search <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 插件。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></div>

<p>修改<strong>theme&#x2F;主题名</strong> 目录 <code>_config.yml</code> 中的 search值</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">swiftype_key:</span> </span><br></pre></td></tr></table></figure></div>

<p>然后在<strong>主目录</strong>的<code>_config.yml</code>文件中添加</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">    <span class="attr">field:</span> <span class="string">all</span></span><br></pre></td></tr></table></figure></div>

<h5 id="3-4-2-Fluid"><a href="#3-4-2-Fluid" class="headerlink" title="3.4.2 Fluid"></a>3.4.2 Fluid</h5><p>修改<strong>主目录</strong>的 <code>_config.fluid.yml</code> 中的 search值</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span></span><br><span class="line"><span class="comment"># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span></span><br><span class="line">  <span class="comment"># Path for search index file, it can be a relative path or an absolute path</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/local-search.xml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 文件生成在本地的位置，必须是相对路径</span></span><br><span class="line">  <span class="comment"># The location where the index file is generated locally, it must be a relative location</span></span><br><span class="line">  <span class="attr">generate_path:</span> <span class="string">/local-search.xml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 搜索的范围</span></span><br><span class="line">  <span class="comment"># Search field</span></span><br><span class="line">  <span class="comment"># Options: post | page | all</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 搜索是否扫描正文</span></span><br><span class="line">  <span class="comment"># If true, search will scan the post content</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-部署"><a href="#4-部署" class="headerlink" title="4 部署"></a>4 部署</h3><p>到前一步本地的博客基本上就建好了，接下来就是将其部署在服务器上</p>
<h4 id="4-1-连接Git仓库"><a href="#4-1-连接Git仓库" class="headerlink" title="4.1 连接Git仓库"></a>4.1 连接Git仓库</h4><p>首先在<a class="link"   href="https://github.com/" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>注册一个账号,建立<code>用户名.github.io</code>的项目</p>
<p>接着打开Git Bash，输入下列命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;注册邮箱&quot;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="4-2-添加密钥"><a href="#4-2-添加密钥" class="headerlink" title="4.2 添加密钥"></a>4.2 添加密钥</h4><p>在Git Bash中继续输入下列命令生成SSH密钥</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;注册邮箱&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>查看密钥</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></div>

<p>将输出的内容复制到<a class="link"   href="https://github.com/settings/keys" >SSH and GPG keys <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>里</p>
<h4 id="4-3-提交部署"><a href="#4-3-提交部署" class="headerlink" title="4.3 提交部署"></a>4.3 提交部署</h4><p>安装<code>hexo-deployer-git</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<p>配置<strong>主目录</strong>的<code>_config.yml</code>文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></div>

<p>部署到<a class="link"   href="https://github.com/" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<p>访问<a class="link"   href="https://用户名.github.io/" >https:&#x2F;&#x2F;用户名.github.io&#x2F; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言获得Cravatar头像服务网址</title>
    <url>/2023/09/30/Go-use-cravatar/</url>
    <content><![CDATA[<p><del>Cravatar真是个好东西</del></p>
<p>这是Cravatar图像请求的Go语言实现，具体的加密方式请查阅<a class="link"   href="https://cravatar.com/developer/api" >这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;crypto/md5&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// Hash值获取方式 先删除前导和尾随的空格，再将所有字符置为小写，最后进行MD5加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hash</span><span class="params">(email <span class="type">string</span>)</span></span> [<span class="number">16</span>]<span class="type">byte</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> md5.Sum([]<span class="type">byte</span>(strings.ToLower(strings.TrimFunc(email, <span class="function"><span class="keyword">func</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> r == <span class="string">&#x27; &#x27;</span></span><br><span class="line">    &#125;))))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 头像获取地址为 https://cravatar.cn/avatar/&#123;HASH&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EmailToCravatarURL</span><span class="params">(email <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;https://cravatar.cn/avatar/%x&quot;</span>, Hash(email))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 试试效果！</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Print(EmailToCravatarURL(&#123;Your email here&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>头像服务</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Navicat连接WSL里的MySQL服务</title>
    <url>/2023/08/02/How-to-use-Navicat-to-connect-to-MySQL-services-in-WSL/</url>
    <content><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h3><p>真的有人会干这么套娃的事情吗？</p>
<p><del>原来是我啊，那没事了</del></p>
<p>究其原因，还是由于之前技术不精，在Windows系统上安装MySQL，结果MySQL炸了，而且还没办法卸载干净，这次想着既然VSCode可以与WSL连接，为何Navicat不能与WSL里的MySQL连接呢？</p>
<p>而且照<a class="link"   href="https://github.com/XCloudFance" >XCloudFance <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>学长的说法：“你可以把WSL想象是里面的一台电脑，你的Windows也是一台独立的电脑”，那么navicat理论上应该可以与WSL中的MySQL连接。</p>
<p>于是，痛苦的两个小时配置之旅就开始了(中途还重装了一次WSL qwq)</p>
<h3 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1 前期准备"></a>1 前期准备</h3><h4 id="1-1-安装Navicat"><a href="#1-1-安装Navicat" class="headerlink" title="1.1 安装Navicat"></a>1.1 安装Navicat</h4><p>自行Baidu&#x2F;Google&#x2F;Bing下载安装包</p>
<p>安装包打开后一路next即可</p>
<h4 id="1-2-安装WSL"><a href="#1-2-安装WSL" class="headerlink" title="1.2 安装WSL"></a>1.2 安装WSL</h4><p>Baidu&#x2F;Google&#x2F;Bing</p>
<p>**注意:**记得将WSL版本设置为WSL2，本人使用的系统是Ubuntu22.04</p>
<h4 id="1-3-在WSL中安装MySQL"><a href="#1-3-在WSL中安装MySQL" class="headerlink" title="1.3 在WSL中安装MySQL"></a>1.3 在WSL中安装MySQL</h4><p>在WSL终端中输入</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure></div>

<p>即可，<code>root</code>及其余账户密码配置请自行百度</p>
<h3 id="2-正式开始吧！"><a href="#2-正式开始吧！" class="headerlink" title="2 正式开始吧！"></a>2 正式开始吧！</h3><h4 id="2-1-找到WSL的IP地址"><a href="#2-1-找到WSL的IP地址" class="headerlink" title="2.1 找到WSL的IP地址"></a>2.1 找到WSL的IP地址</h4><p>首先，我们应该让Windows主机能够访问WSL，那么我们就应该先知道WSL的本地IP访问地址。</p>
<p>在Windows下打开终端(Power Shell)，使用如下命令查询：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure></div>

<p>可以看到这样一行提示：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">以太网适配器 vEthernet (WSL):</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::85d4:3cdb:df1f:f6e1%42</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 172.30.224.1</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.240.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br></pre></td></tr></table></figure></div>

<p>说明主机其实是能够访问到WSL的。</p>
<p>在WSL的终端中，使用<code>ifconfig</code>查询本地IP地址</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure></div>

<p>有可能需要使用如下指令安装<code>net-tools</code>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure></div>

<p>安装成功后，运行<code>ifconfig</code>会输出类似下面的结果：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.30.224.99  netmask 255.255.240.0  broadcast 172.30.239.255</span><br><span class="line">        inet6 fe80::215:5dff:fe99:f76a  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:15:5d:99:f7:6a  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 104254  bytes 266388818 (266.3 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 69925  bytes 5218621 (5.2 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 5644  bytes 29799099 (29.7 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5644  bytes 29799099 (29.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></div>

<p>第二行的<code>172.30.224.99</code>便是你的WSL的本地IP地址。</p>
<h3 id="2-2-设置MySQL被局域网访问"><a href="#2-2-设置MySQL被局域网访问" class="headerlink" title="2.2 设置MySQL被局域网访问"></a>2.2 设置MySQL被局域网访问</h3><p>这时我们可以试着用Navicat连接一下刚才获得IP地址的WSL的MySQL服务，发现Navicat显示连接失败，这是因为我们未设置MySQL能被局域网访问。</p>
<p>进入MySQL中，修改账户的访问权限：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p &lt;password&gt;</span><br><span class="line">mysql-&gt;use mysql</span><br><span class="line">mysql-&gt;update user set host = &#x27;%&#x27; where user =&#x27;root&#x27;;</span><br><span class="line">mysql-&gt;grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; with grant option;</span><br><span class="line">mysql-&gt;flush privileges;</span><br><span class="line">mysql-&gt;exit;</span><br></pre></td></tr></table></figure></div>

<p>找到MySQL的配置文件进行修改:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></div>

<p>在<code>mysqld.cnf</code>中，找到这样一行配置：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure></div>

<p>修改为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind-address = 0.0.0.0</span><br></pre></td></tr></table></figure></div>

<p>保存后重启MySQL：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure></div>

<p>可以通过<code>netstat -aptn</code>检查MySQL的状态</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-设置Ubuntu防火墙"><a href="#2-3-设置Ubuntu防火墙" class="headerlink" title="2.3 设置Ubuntu防火墙"></a>2.3 设置Ubuntu防火墙</h3><p>此时我们还是无法连接，还需关闭Ubuntu的防火墙</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">enable</span> <span class="comment">#开启</span></span><br></pre></td></tr></table></figure></div>

<p>在WSL环境下，可能会得到如下提示：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;</span>, line 427, <span class="keyword">in</span> under_ssh</span><br><span class="line">    ppid = get_ppid(pid)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;</span>, line 421, <span class="keyword">in</span> get_ppid</span><br><span class="line">    <span class="built_in">return</span> int(ppid)</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> int() with base 10: <span class="string">&#x27;S&#x27;</span></span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/sbin/ufw&quot;</span>, line 138, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    not ui.continue_under_ssh():</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/frontend.py&quot;</span>, line 901, <span class="keyword">in</span> continue_under_ssh</span><br><span class="line">    <span class="keyword">if</span> self.backend.do_checks and ufw.util.under_ssh(): <span class="comment"># pragma: no cover</span></span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;</span>, line 457, <span class="keyword">in</span> under_ssh</span><br><span class="line">    <span class="built_in">return</span> under_ssh(ppid)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;</span>, line 457, <span class="keyword">in</span> under_ssh</span><br><span class="line">    <span class="built_in">return</span> under_ssh(ppid)</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;</span>, line 457, <span class="keyword">in</span> under_ssh</span><br><span class="line">    <span class="built_in">return</span> under_ssh(ppid)</span><br><span class="line">  [Previous line repeated 1 more time]</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;</span>, line 434, <span class="keyword">in</span> under_ssh</span><br><span class="line">    raise ValueError(err_msg)</span><br><span class="line">ValueError: Couldn<span class="string">&#x27;t find parent pid for &#x27;</span>3129<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>这是因为<code>/usr/lib/python3/dist-packages/ufw/util.py</code>中有一行Python出现错误</p>
<p>更正方法是进入中：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/lib/python3/dist-packages/ufw/util.py</span><br></pre></td></tr></table></figure></div>

<p>将</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">ppid = <span class="built_in">open</span>(name).readlines()[<span class="number">0</span>].split(<span class="string">&#x27;)&#x27;</span>)[<span class="number">1</span>].split()[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>

<p>改为</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">ppid = <span class="built_in">open</span>(name).readlines()[<span class="number">0</span>].rsplit(<span class="string">&#x27;)&#x27;</span>,<span class="number">1</span>)[<span class="number">1</span>].split()[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>

<p>即可</p>
<p>之后添加允许访问的端口<code>3306</code>并重载生效即可</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 3306</span><br><span class="line">sudo ufw reload</span><br></pre></td></tr></table></figure></div>

<p>完成后查看</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure></div>

<p>得到如下结果即为成功</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Status: active</span><br><span class="line"></span><br><span class="line">To                         Action      From</span><br><span class="line">--                         ------      ----</span><br><span class="line">3306                       ALLOW       Anywhere</span><br><span class="line">3306 (v6)                  ALLOW       Anywhere (v6)</span><br></pre></td></tr></table></figure></div>

<p>这时再使用Navicat访问，即可连接上WSL的MySQL服务。</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Kali WSL</title>
    <url>/2023/11/30/How-to-install-Kali-WSL/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Kali WSL（Windows Subsystem for Linux）是在 Windows 环境下运行 Kali Linux 的一种方式，同时，WSL相比于Linux虚拟机能和Windows较好的进行文件系统的互通，非常适合用于学习。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-开启-WSL-功能"><a href="#1-开启-WSL-功能" class="headerlink" title="1. 开启 WSL 功能"></a>1. 开启 WSL 功能</h3><p>确保系统为 Windows 10 专业版及以上，然后按照以下步骤开启 WSL 功能：</p>
<ul>
<li><p>打开控制面板</p>
</li>
<li><p>进入程序 -&gt; 启用或关闭 Windows 功能</p>
</li>
<li><p>勾选”适用于 Linux 的 Windows 子系统”</p>
</li>
<li><p>系统更新并重启生效</p>
</li>
</ul>
<h3 id="2-安装-Kali-WSL"><a href="#2-安装-Kali-WSL" class="headerlink" title="2. 安装 Kali WSL"></a>2. 安装 Kali WSL</h3><p>在 Windows 应用商店中搜索并下载适用于 Linux 的 Windows 子系统，选择 Kali 作为 Linux 发行版进行安装。</p>
<h3 id="3-升级到-WSL2"><a href="#3-升级到-WSL2" class="headerlink" title="3. 升级到 WSL2"></a>3. 升级到 WSL2</h3><p>由于版本问题，确保升级到 WSL2，执行以下命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart wsl --set-version kali-linux 2</span><br></pre></td></tr></table></figure></div>

<h3 id="4-安装完整版-Kali"><a href="#4-安装完整版-Kali" class="headerlink" title="4. 安装完整版 Kali"></a>4. 安装完整版 Kali</h3><p>安装完成后，打开 Kali Linux ，根据设置用户名及密码。</p>
<p>重新启动 Kali Linux ，这时我们发现我们的 Kali Linux 还有很多工具没用安装。</p>
<p>执行以下命令安装 Kali 的完整版：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y kali-linux-large</span><br></pre></td></tr></table></figure></div>

<h3 id="6-配置图形化桌面并连接（可选）"><a href="#6-配置图形化桌面并连接（可选）" class="headerlink" title="6. 配置图形化桌面并连接（可选）"></a>6. 配置图形化桌面并连接（可选）</h3><p>如果想要体验图形化界面，可以选择安装 Win-KeX</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y kali-win-kex</span><br></pre></td></tr></table></figure></div>

<p>打开 Window Mode (窗口模式)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">kex --win</span><br></pre></td></tr></table></figure></div>

<p>如果你想要体验 Seamless Mode (无缝模式)，还需要额外安装 <a class="link"   href="https://x410.dev/" >X410 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>安装完成后打开并勾选<code>ACCESS CONTROL</code>下的<code>WSL2</code>选项。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/How-to-install-Kali-WSL/X410-Settings.png"
                      alt="X410-Settings"
                ></p>
<p>打开 Seamless Mode (窗口模式)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">kex --sl</span><br></pre></td></tr></table></figure></div>

<p>详细教程:<a class="link"   href="https://x410.dev/cookbook/wsl/protecting-x410-public-access-for-wsl2-via-windows-defender-firewall/" >Protecting X410 Public Access for WSL2 via Windows Defender Firewall - X410.dev <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="7-额外配置（可选）"><a href="#7-额外配置（可选）" class="headerlink" title="7. 额外配置（可选）"></a>7. 额外配置（可选）</h3><p>根据需求，可以配置 Windows Terminal，将 Kali 和 Win-KeX 整合进 Terminal。</p>
<p>以下是我的配置文件(仅留下 Kali WSL 相关配置)</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;list&quot;</span><span class="punctuation">:</span></span><br><span class="line">		<span class="punctuation">[</span></span><br><span class="line">			<span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;46ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kali Linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:///c:/users/&lt;windows user&gt;/pictures/icons/kali-menu.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Windows.Terminal.Wsl&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;startingDirectory&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;//wsl$/kali-linux/home/&lt;kali user&gt;&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="punctuation">&#123;</span></span><br><span class="line">				<span class="comment">// &quot;guid&quot;: &quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;,</span></span><br><span class="line">				<span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:///c:/users/&lt;windows user&gt;/pictures/icons/kali-menu.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win-KeX Window Mode&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wsl -d kali-linux kex --wtstart -s&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;startingDirectory&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;//wsl$/kali-linux/home/&lt;kali user&gt;&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="punctuation">&#123;</span></span><br><span class="line">				<span class="comment">// &quot;guid&quot;: &quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;,</span></span><br><span class="line">				<span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:///c:/users/&lt;windows user&gt;/pictures/icons/kali-menu.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win-KeX Seamless Mode&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wsl -d kali-linux kex --sl --wtstart -s&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;startingDirectory&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;//wsl$/kali-linux/home/&lt;kali user&gt;&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>[Reverse] 基础汇编知识</title>
    <url>/2024/04/03/Basic-Assembly-Language/</url>
    <content><![CDATA[<h2 id="什么是汇编语言"><a href="#什么是汇编语言" class="headerlink" title="什么是汇编语言"></a>什么是汇编语言</h2><p>汇编语言是一种低级编程语言，它为程序提供了直接与CPU指令集交互的能力。与高级编程语言相比，汇编语言几乎不提供任何抽象，这使得编程者能够编写与硬件架构紧密相关的代码。</p>
<h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><p>汇编语言的每条指令通常代表了处理器的一个操作。以下是一些常用的指令类别(以x86架构为准):</p>
<h3 id="数据传输指令"><a href="#数据传输指令" class="headerlink" title="数据传输指令"></a>数据传输指令</h3><ul>
<li><code>mov</code>：将数据从一个位置移动到另一个位置。</li>
<li><code>push</code>：将数据推送到栈上。</li>
<li><code>pop</code>：从栈上弹出数据。</li>
<li><code>lea</code>：加载有效地址到寄存器。</li>
</ul>
<h3 id="算术指令"><a href="#算术指令" class="headerlink" title="算术指令"></a>算术指令</h3><ul>
<li><code>add</code>：加法。</li>
<li><code>sub</code>：减法。</li>
<li><code>mul</code>：无符号乘法。</li>
<li><code>div</code>：无符号除法。</li>
<li><code>inc</code>：将寄存器的值增加1。</li>
<li><code>dec</code>：将寄存器的值减少1。</li>
</ul>
<h3 id="逻辑指令"><a href="#逻辑指令" class="headerlink" title="逻辑指令"></a>逻辑指令</h3><ul>
<li><code>and</code>：逻辑与。</li>
<li><code>or</code>：逻辑或。</li>
<li><code>xor</code>：逻辑异或。</li>
<li><code>not</code>：逻辑非。</li>
</ul>
<h3 id="控制流指令"><a href="#控制流指令" class="headerlink" title="控制流指令"></a>控制流指令</h3><ul>
<li><code>jmp</code>：无条件跳转。</li>
<li><code>je</code>：如果相等则跳转。</li>
<li><code>jne</code>：如果不相等则跳转。</li>
<li><code>jg</code>：如果大于则跳转。</li>
<li><code>jl</code>：如果小于则跳转。</li>
</ul>
<h3 id="函数调用指令"><a href="#函数调用指令" class="headerlink" title="函数调用指令"></a>函数调用指令</h3><ul>
<li><code>call</code>：调用函数。</li>
<li><code>ret</code>：从函数返回。</li>
</ul>
<h3 id="字符串和数组指令"><a href="#字符串和数组指令" class="headerlink" title="字符串和数组指令"></a>字符串和数组指令</h3><ul>
<li><code>movsb</code>：移动字符串字节。</li>
<li><code>movsw</code>：移动字符串字。</li>
<li><code>movsd</code>：移动字符串双字。</li>
</ul>
<h3 id="其他常见指令"><a href="#其他常见指令" class="headerlink" title="其他常见指令"></a>其他常见指令</h3><ul>
<li><code>nop</code>：无操作。</li>
<li><code>int</code>：软件中断。</li>
</ul>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>寄存器是处理器内的小块存储设备，用于临时存储数据和地址。以下是x86架构中的一些主要寄存器：</p>
<h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><ul>
<li><code>EAX</code>：累加器，用于算术操作。</li>
<li><code>EBX</code>：基址寄存器，用于数据段寻址。</li>
<li><code>ECX</code>：计数寄存器，用于循环计数。</li>
<li><code>EDX</code>：数据寄存器，用于I&#x2F;O操作。</li>
</ul>
<h3 id="索引寄存器"><a href="#索引寄存器" class="headerlink" title="索引寄存器"></a>索引寄存器</h3><ul>
<li><code>ESI</code>：源索引，用于字符串操作。</li>
<li><code>EDI</code>：目的索引，同样用于字符串操作。</li>
</ul>
<h3 id="指针寄存器"><a href="#指针寄存器" class="headerlink" title="指针寄存器"></a>指针寄存器</h3><ul>
<li><code>ESP</code>：堆栈指针，指向栈顶。</li>
<li><code>EBP</code>：基指针，用于指向帧的开始。</li>
</ul>
<h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><ul>
<li><code>CS</code>：代码段寄存器。</li>
<li><code>DS</code>：数据段寄存器。</li>
<li><code>SS</code>：堆栈段寄存器。</li>
<li><code>ES</code>：附加段寄存器。</li>
</ul>
<h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><ul>
<li><code>EFLAGS</code>：包含状态、控制和系统标志。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实际上汇编语言与计算机组成原理之间有着紧密的联系，每一个汇编指令和寄存器都对应着计算机硬件的一个或多个单元，更加详细的原理需要许多相关的计算机组成原理知识，这里只是对于一些常用的x86汇编语言知识的总结。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>[长期更新]逆向做题笔记</title>
    <url>/2024/04/04/Notes-on-Reverse/</url>
    <content><![CDATA[<h2 id="练习记录"><a href="#练习记录" class="headerlink" title="练习记录"></a>练习记录</h2><h3 id="Reverse-easyre"><a href="#Reverse-easyre" class="headerlink" title="Reverse-easyre"></a><a class="link"   href="https://buuoj.cn/challenges#easyre" >Reverse-easyre <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>先用DIE查壳，发现是个无壳的64位程序</p>
<p>使用IDA64打开<code>easyre.exe</code>文件，找到程序的入口<code>main</code>:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> b; <span class="comment">// [rsp+28h] [rbp-8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> a; <span class="comment">// [rsp+2Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">  <span class="keyword">if</span> ( a == b )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag&#123;this_Is_a_EaSyRe&#125;&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sorry,you can&#x27;t get flag&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面这段程序的逻辑是读入两个 <code>int</code> 类型数字 <code>a</code> 和 <code>b</code> ，如果两个数字相等则输出flag，否则输出错误信息，从而获得 <code>flag</code> :</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;this_Is_a_EaSyRe&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Reverse-reverse1"><a href="#Reverse-reverse1" class="headerlink" title="Reverse-reverse1"></a><a class="link"   href="https://buuoj.cn/challenges#reverse1" >Reverse-reverse1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>先用DIE查壳，发现是个无壳的64位程序</p>
<p>使用IDA64打开<code>reverse_1.exe</code>文件，找到程序的入口<code>main_0</code>:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">224</span>]; <span class="comment">// [rsp+48h] [rbp+28h] BYREF</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+128h] [rbp+108h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v7;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">82</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">-858993460</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = j;</span><br><span class="line">    <span class="keyword">if</span> ( j &gt; j_strlen(Str2) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( Str2[j] == <span class="number">111</span> )</span><br><span class="line">      Str2[j] = <span class="number">48</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_1400111D1(<span class="string">&quot;input the flag:&quot;</span>);</span><br><span class="line">  sub_14001128F(<span class="string">&quot;%20s&quot;</span>, Str1);</span><br><span class="line">  v5 = j_strlen(Str2);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(Str1, Str2, v5) )</span><br><span class="line">    sub_1400111D1(<span class="string">&quot;this is the right flag!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sub_1400111D1(<span class="string">&quot;wrong flag\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过结合运行结果和程序来看，这段程序中的 <code>sub_1400111D1</code> 对应的应该是 <code>printf</code> 函数， <code>sub_14001128F</code> 对应的应该是 <code>scanf</code> 函数，可以选中后使用 <code>右键 &gt;&gt; Rename global item</code> 进行替换。</p>
<p>接下来我们观察上面这一段 <code>for</code> 循环，这段 <code>for</code> 循环的逻辑似乎是遍历 <code>Str2</code> 的每一位，如果该位的值为 <code>111</code> 则将其替换为 <code>48</code> 由于 <code>Str2</code> 的类型是字符数组，所以 <code>111</code> 和 <code>48</code> 应该是ASCII码对应的字符 可以选中后 <code>右键 &gt;&gt; Char</code> 将其转化为字符，最终我们得到的程序如下:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">224</span>]; <span class="comment">// [rsp+48h] [rbp+28h] BYREF</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+128h] [rbp+108h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v7;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">82</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">-858993460</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = j;</span><br><span class="line">    <span class="keyword">if</span> ( j &gt; j_strlen(Str2) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( Str2[j] == <span class="string">&#x27;o&#x27;</span> )</span><br><span class="line">      Str2[j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input the flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%20s&quot;</span>, Str1);</span><br><span class="line">  v5 = j_strlen(Str2);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(Str1, Str2, v5) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;this is the right flag!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;wrong flag\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样，程序的逻辑就变得非常清晰了：将 <code>Str2</code> 中的每个 <code>o</code> 替换为 <code>0</code> ，读入一个字符串 <code>Str1</code> 与其进行比较，如果相同说明校验成果，否则输出错误信息，接下来我们要做的就是找到 <code>Str2</code> 以便得知我们需要输入的信息。</p>
<p>双击 <code>Str2</code> 跳转到静态数据区，可以观察到这样一段代码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:000000014001C000                               ; char Str2[]</span><br><span class="line">.data:000000014001C000 7B 68 65 6C 6C 6F 5F 77 6F 72+Str2 db &#x27;&#123;hello_world&#125;&#x27;,0               ; DATA XREF: main_0+4B↑o</span><br></pre></td></tr></table></figure></div>

<p>说明 <code>Str2</code> 的初始值为 <code>&#123;hello_world&#125;</code> 经过 <code>for</code> 循环处理后获得 <code>&#123;hell0_w0rld&#125;</code> ，由此获得 <code>flag</code> .</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;hell0_w0rld&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Reverse-reverse2"><a href="#Reverse-reverse2" class="headerlink" title="Reverse-reverse2"></a><a class="link"   href="https://buuoj.cn/challenges#reverse2" >Reverse-reverse2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>先用DIE查壳，这次是个ELF64文件</p>
<p>使用IDA64打开<code>reverse_2</code>文件，找到程序的入口<code>main</code>:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> stat_loc; <span class="comment">// [rsp+4h] [rbp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">__pid_t</span> pid; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="type">char</span> s2[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span> ( pid )</span><br><span class="line">  &#123;</span><br><span class="line">    waitpid(pid, &amp;stat_loc, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(&amp;flag); ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(&amp;flag + i) == <span class="string">&#x27;i&#x27;</span> || *(&amp;flag + i) == <span class="string">&#x27;r&#x27;</span> )</span><br><span class="line">        *(&amp;flag + i) = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input the flag:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%20s&quot;</span>, s2);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;flag, s2) )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;this is the right flag!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;wrong flag!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以发现与上一题大同小异，这段程序的逻辑是将flag中的 <code>i</code> 和 <code>r</code> 替换为 <code>1</code> ，接下来单击 <code>flag</code> 查找其具体值</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:0000000000601080 7B                            flag db &#x27;&#123;&#x27;                             ; DATA XREF: main+34↑r</span><br><span class="line">.data:0000000000601080                                                                       ; main+44↑r</span><br><span class="line">.data:0000000000601080                                                                       ; main+54↑w</span><br><span class="line">.data:0000000000601080                                                                       ; main+65↑o</span><br><span class="line">.data:0000000000601080                                                                       ; main+BD↑o</span><br><span class="line">.data:0000000000601081 68 61 63 6B 69 6E 67 5F 66 6F+aHackingForFun db &#x27;hacking_for_fun&#125;&#x27;,0</span><br></pre></td></tr></table></figure></div>

<p>可以得知 <code>flag</code> 的值为 <code>&#123;hacking_for_fun&#125;</code> (注意别漏了最开始的 <code>&#123;</code> )，依照 <code>main</code> 函数的方法对 <code>flag</code> 进行处理，得到 <code>flag</code> :</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;hack1ng_fo1_fun&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Reverse-reverse3"><a href="#Reverse-reverse3" class="headerlink" title="Reverse-reverse3"></a><a class="link"   href="https://buuoj.cn/challenges#reverse3" >Reverse-reverse3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>先用DIE查壳，这次是个PE32文件</p>
<p>使用IDA打开<code>reverse_3.exe</code>文件，找到程序的入口<code>main</code>:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [esp+0h] [ebp-188h]</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [esp+0h] [ebp-188h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> j; <span class="comment">// [esp+DCh] [ebp-ACh]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+E8h] [ebp-A0h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v11; <span class="comment">// [esp+E8h] [ebp-A0h]</span></span><br><span class="line">  <span class="type">char</span> Destination[<span class="number">108</span>]; <span class="comment">// [esp+F4h] [ebp-94h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">28</span>]; <span class="comment">// [esp+160h] [ebp-28h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">8</span>]; <span class="comment">// [esp+17Ch] [ebp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)i &gt;= <span class="number">0x64</span> )</span><br><span class="line">      j____report_rangecheckfailure();</span><br><span class="line">    Destination[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;please enter the flag:&quot;</span>, v7);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%20s&quot;</span>, (<span class="type">char</span>)Str);</span><br><span class="line">  v3 = j_strlen(Str);</span><br><span class="line">  v4 = (<span class="type">const</span> <span class="type">char</span> *)sub_4110BE((<span class="type">int</span>)Str, v3, (<span class="type">int</span>)v14);</span><br><span class="line">  <span class="built_in">strncpy</span>(Destination, v4, <span class="number">0x28</span>u);</span><br><span class="line">  v11 = j_strlen(Destination);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v11; ++j )</span><br><span class="line">    Destination[j] += j;</span><br><span class="line">  v5 = j_strlen(Destination);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(Destination, Str2, v5) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rigth flag!\n&quot;</span>, v8);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;wrong flag!\n&quot;</span>, v8);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>程序的大体逻辑如下:</p>
<ol>
<li><p>提示用户输入一个 <code>Str</code> 字符串。</p>
</li>
<li><p>调用 <code>sub_4110BE</code> 函数，处理 <code>Str</code> 数组并赋值给 <code>v4</code>。</p>
</li>
<li><p>将 <code>v4</code> 数组的内容复制到 <code>Destination</code> 数组中。</p>
</li>
<li><p>遍历 <code>Destination</code> 中的每个字符，将其值加上其索引值 <code>j</code>。</p>
</li>
<li><p>比较处理后的 <code>Destination</code> 字符串和 <code>Str2</code> 字符串，如果 <code>Destination</code> 与 <code>Str2</code> 相同，则打印 <code>right flag!</code>, 如果不同，则打印 <code>wrong flag!</code> 。</p>
</li>
</ol>
<p>接下来的问题就是 <code>sub_4110BE</code> 函数到底是干什么的，双击进入该函数，可以发现如下代码:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *__cdecl <span class="title function_">sub_411AB0</span><span class="params">(<span class="type">char</span> *a1, <span class="type">unsigned</span> <span class="type">int</span> a2, <span class="type">int</span> *a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+E0h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v9; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="type">void</span> *v12; <span class="comment">// [esp+F8h] [ebp-14h]</span></span><br><span class="line">  <span class="type">char</span> *v13; <span class="comment">// [esp+104h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 || !a2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v9 = a2 / <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)(a2 / <span class="number">3</span>) % <span class="number">3</span> )</span><br><span class="line">    ++v9;</span><br><span class="line">  v10 = <span class="number">4</span> * v9;</span><br><span class="line">  *a3 = v10;</span><br><span class="line">  v12 = <span class="built_in">malloc</span>(v10 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v12 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  j_memset(v12, <span class="number">0</span>, v10 + <span class="number">1</span>);</span><br><span class="line">  v13 = a1;</span><br><span class="line">  v11 = a2;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v11 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_41A144[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_41A144[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_41A144[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">3</span> &amp;&amp; v11 &gt;= <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      byte_41A144[i] = *v13;</span><br><span class="line">      --v11;</span><br><span class="line">      ++v13;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        *((_BYTE *)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v5 = v4 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)v12 + v5) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v5) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        *((_BYTE *)v12 + ++v5) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        v4 = v5 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        *((_BYTE *)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v6 = v4 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)v12 + v6) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v6) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v6) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        v4 = v6 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        *((_BYTE *)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v7 = v4 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)v12 + v7) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v7) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v7) = aAbcdefghijklmn[byte_41A144[<span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">        v4 = v7 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *((_BYTE *)v12 + v4) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过分析 <del>(询问AI)</del> 可知这是一段 <code>base64</code> 加密程序，其中 <code>aAbcdefghijklmn</code> 数组的值为 <code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=</code> 与标准的 <code>base64</code> 编码表一致。</p>
<p>至此，我们可以得知这段程序的逻辑是对输入的字符串先进行base64加密，接着对每位进行移位操作，与Str2字符串进行比对校验。</p>
<p>进入静态数据区我们可以获得字符串 <code>Str2</code> 的值为 <code>e3nifIH9b_C@n@dH</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:0041A034                               ; char Str2[]</span><br><span class="line">.data:0041A034 65 33 6E 69 66 49 48 39 62 5F+Str2 db &#x27;e3nifIH9b_C@n@dH&#x27;,0            ; DATA XREF: _main_0+142↑o</span><br></pre></td></tr></table></figure></div>

<p>对main函数流程逆向获得解密程序</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">Str2 = <span class="string">&quot;e3nifIH9b_C@n@dH&quot;</span></span><br><span class="line">temp = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆向索引偏移操作</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Str2)):</span><br><span class="line">    <span class="comment"># 将每个字符的ASCII值减去其索引值</span></span><br><span class="line">    temp += <span class="built_in">chr</span>(<span class="built_in">ord</span>(Str2[i]) - i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对结果进行Base64解码</span></span><br><span class="line">flag = base64.b64decode(temp).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The flag is: flag<span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>从而获得 <code>flag</code>:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;i_l0ve_you&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>[长期更新]杂项做题笔记</title>
    <url>/2024/04/03/Notes-on-Misc/</url>
    <content><![CDATA[<h2 id="1-工具使用"><a href="#1-工具使用" class="headerlink" title="1 工具使用"></a>1 工具使用</h2><h3 id="1-1-stegsolve"><a href="#1-1-stegsolve" class="headerlink" title="1.1  stegsolve"></a>1.1  <a class="link"   href="http://www.caesum.com/handbook/Stegsolve.jar" >stegsolve <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>打开<code>Stegsolve</code>图片隐写解析器</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar Stegsolve.jar</span><br></pre></td></tr></table></figure></div>

<h2 id="2-练习记录"><a href="#2-练习记录" class="headerlink" title="2 练习记录"></a>2 练习记录</h2><h3 id="Misc-金三胖"><a href="#Misc-金三胖" class="headerlink" title="Misc-金三胖"></a><a class="link"   href="https://buuoj.cn/challenges#%E9%87%91%E4%B8%89%E8%83%96" >Misc-金三胖 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>在<code>File &gt;&gt; Open</code>中打开<code>gif</code>文件</p>
<p>使用<code>Analyse &gt;&gt; Frame</code>逐帧查看</p>
<p>在第<code>21,51,79</code>帧寻找到<code>flag</code>片段，将其组合在一起获得<code>flag&#123;he11ohongke&#125;</code></p>
<h3 id="Misc-LSB"><a href="#Misc-LSB" class="headerlink" title="Misc-LSB"></a><a class="link"   href="https://buuoj.cn/challenges#LSB" >Misc-LSB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>在<code>File &gt;&gt; Open</code>中打开<code>png</code>文件</p>
<p>发现在<code>Red plane 0</code>, <code>Green plane 0</code>, <code>Blue plane 0</code>的模式下图片上方有一段色块异常</p>
<p>使用<code>Analyse &gt;&gt; Data Extract</code>选中<code>Red 0, Green 0, Blue 0, LSB First</code>并<code>Save Bin</code>保存为图片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Notes-on-Misc/flag.png"
                      alt="[flag.png]"
                ></p>
<p>打开该图片得到一个二维码, 使用<code>QR Research</code>扫描获得: <code>flag&#123;1sb_i4_s0_Ea4y&#125;</code></p>
<h3 id="Misc-镜子里面的世界"><a href="#Misc-镜子里面的世界" class="headerlink" title="Misc-镜子里面的世界"></a><a class="link"   href="https://buuoj.cn/challenges#%E9%95%9C%E5%AD%90%E9%87%8C%E9%9D%A2%E7%9A%84%E4%B8%96%E7%95%8C" >Misc-镜子里面的世界 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>在<code>File &gt;&gt; Open</code>中打开<code>png</code>文件</p>
<p>发现在<code>Red plane 0</code>, <code>Green plane 0</code>, <code>Blue plane 0</code>的模式下图片全黑</p>
<p>使用<code>Analyse &gt;&gt; Data Extract</code>选中<code>Red 0, Green 0, Blue 0</code>，得到如下文本</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">4865792049207468 696e6b2077652063  Hey I th ink we c</span><br><span class="line">616e207772697465 20736166656c7920  an write  safely </span><br><span class="line">696e207468697320 66696c6520776974  in this  file wit</span><br><span class="line">686f757420616e79 6f6e652073656569  hout any one seei</span><br><span class="line">6e672069742e2041 6e797761792c2074  ng it. A nyway, t</span><br><span class="line">6865207365637265 74206b6579206973  he secre t key is</span><br><span class="line">3a2073743367305f 7361757275735f77  : st3g0_ saurus_w</span><br><span class="line">7233636b73000000 0000000000000000  r3cks... ........</span><br></pre></td></tr></table></figure></div>

<p>获得<code>flag&#123;st3g0_saurus_wr3cks&#125;</code></p>
<h3 id="Misc-二维码"><a href="#Misc-二维码" class="headerlink" title="Misc-二维码"></a><a class="link"   href="https://buuoj.cn/challenges#%E4%BA%8C%E7%BB%B4%E7%A0%81" >Misc-二维码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>下载文件并解压获得<code>QR_code.png</code></p>
<p>看起来是个二维码？用<code>QR Research</code>扫描一下看:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Notes-on-Misc/Misc-%E4%BA%8C%E7%BB%B4%E7%A0%81.png"
                      alt="[Misc-二维码.png]"
                ></p>
<p>好吧什么都没有…</p>
<p>再用<code>stegsolve</code>试试？</p>
<p>一无所获…</p>
<p>或许这并不全是<code>png</code>文件?用<code>binwalk</code>命令分析一下</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/二维码]</span><br><span class="line">└─$ binwalk QR_code.png</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             PNG image, 280 x 280, 1-bit colormap, non-interlaced</span><br><span class="line">471           0x1D7           Zip archive data, encrypted at least v2.0 to extract, compressed size: 29, uncompressed size: 15, name: 4number.txt</span><br><span class="line">650           0x28A           End of Zip archive, footer length: 22</span><br></pre></td></tr></table></figure></div>

<p>发现里面还藏了个zip文件，使用<code>foremost</code>分离隐藏文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/二维码]</span><br><span class="line">└─$ foremost ./QR_code.png </span><br><span class="line"></span><br><span class="line">Processing: ./QR_code.png</span><br><span class="line">�foundat=4number.txtn</span><br><span class="line">Qjxu�J����[����OPF4L�</span><br><span class="line">*|</span><br></pre></td></tr></table></figure></div>

<p>进入<code>output</code>文件夹中</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/二维码/output]</span><br><span class="line">└─$ <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">audit.txt  png  zip</span><br></pre></td></tr></table></figure></div>

<p>在<code>zip</code>文件夹里有一个<code>00000000.zip</code>文件，但是需要密码，由<code>4number.txt</code>的提示我们可以猜测密码由四位数字组成，尝试使用<code>fcrackzip</code>暴力破解:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/二维码/output/zip]</span><br><span class="line">└─$ fcrackzip -b -c1 -l 1-4 -u 00000000.zip                                                           </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PASSWORD FOUND!!!!: pw == 7639</span><br></pre></td></tr></table></figure></div>

<p>得到密码为<code>7639</code>，解压文件<code>00000000.zip</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/二维码/output/zip]</span><br><span class="line">└─$ unzip 00000000.zip </span><br><span class="line">Archive:  00000000.zip</span><br><span class="line">[00000000.zip] 4number.txt password: </span><br><span class="line">  inflating: 4number.txt             </span><br><span class="line"></span><br><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/二维码/output/zip]</span><br><span class="line">└─$ <span class="built_in">ls</span>                                                                                                </span><br><span class="line">00000000.zip  4number.txt</span><br><span class="line"></span><br><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/二维码/output/zip]</span><br><span class="line">└─$ <span class="built_in">cat</span> ./4number.txt                                                                                 </span><br><span class="line">CTF&#123;vjpw_wnoei&#125;</span><br></pre></td></tr></table></figure></div>

<p>成功获得<code>flag&#123;vjpw_wnoei&#125;</code></p>
<h3 id="Misc-大白"><a href="#Misc-大白" class="headerlink" title="Misc-大白"></a><a class="link"   href="https://buuoj.cn/challenges#%E5%A4%A7%E7%99%BD" >Misc-大白 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>打开图片，发现无法正常打开(Kali系统下)，用<code>binwalk</code>命令查看图片文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/dabai]</span><br><span class="line">└─$ binwalk ./dabai.png</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             PNG image, 679 x 256, 8-bit/color RGBA, non-interlaced</span><br><span class="line">91            0x5B            Zlib compressed data, compressed</span><br></pre></td></tr></table></figure></div>

<p>发现还有一段数据未使用，可能是PNG文件头中宽高设置不正确</p>
<blockquote>
<p>PNG文件结构(<a class="link"   href="https://docs.fileformat.com/image/png/" >PNG File Format - Raster Image File <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)<br>00 - 03 : Header <code>89 50 4E 47</code><br>08 - 0B : Length<br>0C - 0F : Chunk Type Code<br>10 - 13 : Width<br>14 - 17 : Height<br>1D - 20 : CRC</p>
</blockquote>
<p>使用如下<code>Python</code>脚本获取图片真实大小</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件名</span></span><br><span class="line">filename = <span class="string">&quot;dabai.png&quot;</span></span><br><span class="line"><span class="comment">#图片当前CRC(29-32位)</span></span><br><span class="line">CRC = <span class="number">0x6d7c7135</span></span><br><span class="line"></span><br><span class="line">crcbp = <span class="built_in">open</span>(filename, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + \</span><br><span class="line">            struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i) + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j) + crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> (crc32 == CRC):</span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Tools/Misc]</span><br><span class="line">└─$ python calc_pic_size.py </span><br><span class="line">679 479</span><br><span class="line">hex: 0x2a7 0x1df</span><br></pre></td></tr></table></figure></div>

<p>打开十六进制编辑器, 将<code>10 - 17</code>位设置为正确值:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Notes-on-Misc/Misc-%E5%A4%A7%E7%99%BD.png"
                      alt="[Misc-大白.png]"
                ></p>
<p>再次打开图片，即可获得<code>flag&#123;He1l0_d4_ba1&#125;</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Notes-on-Misc/dabai.png"
                      alt="[dabai.png]"
                ></p>
<h3 id="Misc-你竟然赶我走"><a href="#Misc-你竟然赶我走" class="headerlink" title="Misc-你竟然赶我走"></a><a class="link"   href="https://buuoj.cn/challenges#%E4%BD%A0%E7%AB%9F%E7%84%B6%E8%B5%B6%E6%88%91%E8%B5%B0" >Misc-你竟然赶我走 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>解压后发现一张图片，先用<code>Stegsolve</code>试试，尝试了一圈发现在某些模式下右下角有些变化，推测可能在文件尾有问题</p>
<p>使用<code>010 Editor</code>打开文件，一直拉到最底下，获得<code>flag&#123;stego_is_s0_bor1ing&#125;</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Notes-on-Misc/Misc-%E4%BD%A0%E7%AB%9F%E7%84%B6%E8%B5%B6%E6%88%91%E8%B5%B0.png"
                      alt="[Misc-你竟然赶我走.png]"
                ></p>
<h3 id="Misc-zip伪加密"><a href="#Misc-zip伪加密" class="headerlink" title="Misc-zip伪加密"></a><a class="link"   href="https://buuoj.cn/challenges#zip%E4%BC%AA%E5%8A%A0%E5%AF%86" >Misc-zip伪加密 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>下载文件，先解压</p>
<p>? 怎么加密了</p>
<p>先<code>binwalk</code>看看文件结构，看看有没有藏些什么提示</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/zip伪加密]</span><br><span class="line">└─$ binwalk ./ee2f7f26-5173-4e7a-8ea4-e4945e6f04ff.zip </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             Zip archive data, encrypted at least v2.0 to extract, compressed size: 25, uncompressed size: 23, name: flag.txt</span><br><span class="line">153           0x99            End of Zip archive, footer length: 22</span><br></pre></td></tr></table></figure></div>

<p>好吧并没有…</p>
<p>考虑到标题是zip伪加密，查了查<a class="link"   href="https://docs.fileformat.com/compression/zip/" >zip的文件结构 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<table>
<thead>
<tr>
<th>Offset</th>
<th>Bytes</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>4</td>
<td>Local file header signature # 0x04034b50 (read as a little-endian number)</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>Version needed to extract (minimum)</td>
</tr>
<tr>
<td>6</td>
<td>2</td>
<td>General purpose bit flag</td>
</tr>
<tr>
<td>8</td>
<td>2</td>
<td>Compression method</td>
</tr>
<tr>
<td>10</td>
<td>2</td>
<td>File last modification time</td>
</tr>
<tr>
<td>12</td>
<td>2</td>
<td>File last modification date</td>
</tr>
<tr>
<td>14</td>
<td>4</td>
<td>CRC-32</td>
</tr>
<tr>
<td>18</td>
<td>4</td>
<td>Compressed size</td>
</tr>
<tr>
<td>22</td>
<td>4</td>
<td>Uncompressed size</td>
</tr>
<tr>
<td>26</td>
<td>2</td>
<td>File name length (n)</td>
</tr>
<tr>
<td>28</td>
<td>2</td>
<td>Extra field length (m)</td>
</tr>
<tr>
<td>30</td>
<td>n</td>
<td>File Name</td>
</tr>
<tr>
<td>30+n</td>
<td>m</td>
<td>Extra Field</td>
</tr>
</tbody></table>
<p>其中<code>General purpose bit flag</code>为<code>00 00</code>时为未设置加密</p>
<p>故修改 06 和 47 位的<code>09</code>为<code>00</code>即可无密码进行解压获得<code>flag.txt</code></p>
<p>进而获得<code>flag&#123;Adm1N-B2G-kU-SZIP&#125;</code></p>
<h3 id="Misc-BJDCTF2020-鸡你太美"><a href="#Misc-BJDCTF2020-鸡你太美" class="headerlink" title="Misc-[BJDCTF2020]鸡你太美"></a><a class="link"   href="https://buuoj.cn/challenges#[BJDCTF2020]%E9%B8%A1%E4%BD%A0%E5%A4%AA%E7%BE%8E" >Misc-[BJDCTF2020]鸡你太美 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>使用十六进制编辑器打开两个文件，对比发现<code>篮球副本.gif</code>文件头缺少<code>GIF8(47 49 46 38)</code>字样，添加后就能正常打开了，进而获得<code>flag&#123;zhi_yin_you_are_beautiful&#125;</code></p>
<h3 id="Misc-N种方法解决"><a href="#Misc-N种方法解决" class="headerlink" title="Misc-N种方法解决"></a><a class="link"   href="https://buuoj.cn/challenges#N%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3" >Misc-N种方法解决 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>下载获得<code>KEY.exe</code>文件，点击无法运行</p>
<p>使用Visual Studio Code打开，发现如下字样</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">data:image/jpg;base64,...</span><br></pre></td></tr></table></figure></div>

<p>猜测是一个图片文件，后面的<code>...</code>为<code>base64</code>加密后的文件内容</p>
<p>使用<a class="link"   href="https://the-x.cn/encodings/Base64.aspx" >在线解密网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>解密后保存为<code>png</code>文件，得到一个二维码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Notes-on-Misc/from_the-x.png"
                      alt="[from_the-x.png]"
                ></p>
<p>扫描获得<code>KEY&#123;dca57f966e4e4e31fd5b15417da63269&#125;</code></p>
<h3 id="Misc-另外一个世界"><a href="#Misc-另外一个世界" class="headerlink" title="Misc-另外一个世界"></a><a class="link"   href="https://buuoj.cn/challenges#%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E4%B8%96%E7%95%8C" >Misc-另外一个世界 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>解压后又是一个图片，用<code>Stegsolve</code>和<code>binwalk</code>都没看出什么异常</p>
<p>尝试用十六进制编辑器打开，在最底部发现一段不太寻常的01串</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">01101011 01101111 01100101 01101011 01101010 00110011 01110011</span><br></pre></td></tr></table></figure></div>

<p>每8位转化为10进制($2^8-1&#x3D;255$)并对应到ASCII码获得字符串</p>
<table>
<thead>
<tr>
<th>二进制</th>
<th>十进制</th>
<th>ASCII</th>
</tr>
</thead>
<tbody><tr>
<td>01101011</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>01101111</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>01100101</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>01101011</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>01101010</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>00110011</td>
<td>51</td>
<td>3</td>
</tr>
<tr>
<td>01110011</td>
<td>115</td>
<td>s</td>
</tr>
</tbody></table>
<p>获得<code>flag&#123;koekj3s&#125;</code></p>
<h3 id="Misc-wireshark"><a href="#Misc-wireshark" class="headerlink" title="Misc-wireshark"></a><a class="link"   href="https://buuoj.cn/challenges#wireshark" >Misc-wireshark <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>使用<code>wireshark</code>打开流量包</p>
<p>Ctrl + F打开过滤器，据题目提示，查找<code>POST</code>请求</p>
<p>运气很好，第一个<code>POST</code>请求就能获得<code>flag&#123;ffb7567a1d4f4abdffdb54e022f8facd&#125;</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Notes-on-Misc/Misc-wireshark.png"
                      alt="[Misc-wireshark.png]"
                ></p>
<h3 id="Misc-数据包中的线索"><a href="#Misc-数据包中的线索" class="headerlink" title="Misc-数据包中的线索"></a><a class="link"   href="https://buuoj.cn/challenges#%E6%95%B0%E6%8D%AE%E5%8C%85%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%B4%A2" >Misc-数据包中的线索 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>直接查询<code>HTTP</code></p>
<p>找到这条</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Notes-on-Misc/Misc-%E6%95%B0%E6%8D%AE%E5%8C%85%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%B4%A2.png"
                      alt="[Misc-数据包中的线索.png]"
                ></p>
<p><code>右键 &gt;&gt; Follow &gt;&gt; HTTP Stream</code>，将内容复制下来通过<code>base64</code>解码得到一张图片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Notes-on-Misc/from_the-x.jpg"
                      alt="[from_the-x.jpg]"
                ></p>
<p>获得<code>flag&#123;209acebf6324a09671abc31c869de72c&#125;</code></p>
<h3 id="Misc-文件中的秘密"><a href="#Misc-文件中的秘密" class="headerlink" title="Misc-文件中的秘密"></a><a class="link"   href="https://buuoj.cn/challenges#%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E7%A7%98%E5%AF%86" >Misc-文件中的秘密 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>Windows下:</p>
<p><code>右键 &gt;&gt; 属性(Alt + Ctrl) &gt;&gt; 详细信息 &gt;&gt; 备注</code> 获取 <code>flag&#123;870c5a72806115cb5439345d8b014396&#125;</code></p>
<p>也可以用十六进制编辑器查找到相应片段</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Notes-on-Misc/Misc-%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E7%A7%98%E5%AF%86.png"
                      alt="[Misc-文件中的秘密.png]"
                ></p>
<h3 id="Misc-FLAG"><a href="#Misc-FLAG" class="headerlink" title="Misc-FLAG"></a><a class="link"   href="https://buuoj.cn/challenges#FLAG" >Misc-FLAG <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>打开<code>Stegsolve</code>，使用<code>Analyse &gt;&gt; Data Extract</code>选中<code>Red 0, Green 0, Blue 0, LSB First</code>并<code>Save Bin</code>保存为zip文件并解压</p>
<p>执行<code>1</code>文件，可以找到<code>hctf&#123;dd0gf4c3tok3yb0ard4g41n~~~&#125;</code>字样</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/FLAG]</span><br><span class="line">└─$ <span class="built_in">chmod</span> +x 1</span><br><span class="line"></span><br><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/FLAG]</span><br><span class="line">└─$ ./1</span><br><span class="line">hctf&#123;dd0gf4c3tok3yb0ard4g41n~~~&#125;</span><br></pre></td></tr></table></figure></div>

<p>或者用<code>strings</code>命令扫描文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/FLAG]</span><br><span class="line">└─$ strings 1 | grep hctf</span><br><span class="line">hctf&#123;dd0gf4c3tok3yb0ard4g41n~~~&#125;</span><br></pre></td></tr></table></figure></div>

<p>或者用<code>ghidra</code>反编译二进制文件，找到<code>main</code>函数查看代码，发现</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hctf&#123;dd0gf4c3tok3yb0ard4g41n~~~&#125;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>都能获取<code>hctf&#123;dd0gf4c3tok3yb0ard4g41n~~~&#125;</code></p>
<h3 id="Misc-后门查杀"><a href="#Misc-后门查杀" class="headerlink" title="Misc-后门查杀"></a><a class="link"   href="https://buuoj.cn/challenges#%E5%90%8E%E9%97%A8%E6%9F%A5%E6%9D%80" >Misc-后门查杀 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>将解压后的文件夹扔进D盾扫描</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Notes-on-Misc/Misc-%E5%90%8E%E9%97%A8%E6%9F%A5%E6%9D%80-1.png"
                      alt="[Misc-后门查杀-1.png]"
                ></p>
<p>点击<code>已知后门</code>，<code>右键 &gt;&gt; 查看文件</code>，找到如下字段，其中变量<code>pass</code>的内容为<code>md5</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Notes-on-Misc/Misc-%E5%90%8E%E9%97%A8%E6%9F%A5%E6%9D%80-2.png"
                      alt="[Misc-后门查杀-2.png]"
                ></p>
<p>依照提示进而获得<code>flag&#123;6ac45fb83b3bc355c024f5034b947dd3&#125;</code></p>
<h3 id="Misc-来首歌吧"><a href="#Misc-来首歌吧" class="headerlink" title="Misc-来首歌吧"></a><a class="link"   href="https://buuoj.cn/challenges#%E6%9D%A5%E9%A6%96%E6%AD%8C%E5%90%A7" >Misc-来首歌吧 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>使用<code>Audacity</code>打开解压后的音频文件<code>stego100</code></p>
<p>放大音轨后感觉好像是摩斯电码？先把它抄下来</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">..... -... -.-. ----. ..--- ..... -.... ....- ----. -.-. -... ----- .---- ---.. ---.. ..-. ..... ..--- . -... .---- --... -.. --... ----- ----. ..--- ----. .---- ----. .---- -.-.</span><br></pre></td></tr></table></figure></div>

<p>放到解密器里解密，获得<code>flag&#123;5BC925649CB0188F52E617D70929191C&#125;</code></p>
<h3 id="Misc-乌镇峰会种图"><a href="#Misc-乌镇峰会种图" class="headerlink" title="Misc-乌镇峰会种图"></a><a class="link"   href="https://buuoj.cn/challenges#%E4%B9%8C%E9%95%87%E5%B3%B0%E4%BC%9A%E7%A7%8D%E5%9B%BE" >Misc-乌镇峰会种图 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>思路同<a class="link"   href="https://buuoj.cn/challenges#%E4%BD%A0%E7%AB%9F%E7%84%B6%E8%B5%B6%E6%88%91%E8%B5%B0" >Misc-你竟然赶我走 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>flag&#123;97314e7864a8f62627b26f3f998c37f1&#125;</code></p>
<h3 id="Misc-基础破解"><a href="#Misc-基础破解" class="headerlink" title="Misc-基础破解"></a><a class="link"   href="https://buuoj.cn/challenges#%E5%9F%BA%E7%A1%80%E7%A0%B4%E8%A7%A3" >Misc-基础破解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>根据题目提示，我们使用<code>rarcrack</code>命令暴力破解下载获得的文件</p>
<p>首先设置<code>&lt;filename&gt;.xml</code>配置文件</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rarcrack</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">abc</span>&gt;</span>0123456789<span class="tag">&lt;/<span class="name">abc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">current</span>&gt;</span>0000<span class="tag">&lt;/<span class="name">current</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">good_password</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rarcrack</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>再使用命令破解</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/基础破解]</span><br><span class="line">└─$ rarcrack »ù´¡ÆÆ½â.rar --threads 20 --<span class="built_in">type</span> rar</span><br><span class="line">RarCrack! 0.2 by David Zoltan Kedves (kedazo@gmail.com)</span><br><span class="line"></span><br><span class="line">INFO: number of threads adjusted to 12</span><br><span class="line">INFO: the specified archive <span class="built_in">type</span>: rar</span><br><span class="line">INFO: cracking »ù´¡ÆÆ½â.rar, status file: »ù´¡ÆÆ½â.rar.xml</span><br><span class="line">INFO: Resuming cracking from password: <span class="string">&#x27;0000&#x27;</span></span><br><span class="line">GOOD: password cracked: <span class="string">&#x27;2563&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>解压获得<code>flag.txt</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZmxhZ3s3MDM1NDMwMGE1MTAwYmE3ODA2ODgwNTY2MWI5M2E1Y30=</span><br></pre></td></tr></table></figure></div>

<p>尝试提交<code>flag</code>，发现错误</p>
<p>再次观察这段消息，或许是加密后的结果？</p>
<p>使用<a class="link"   href="https://the-x.cn/encodings/Base64.aspx" >在线解密网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>解密，获取<code>flag&#123;70354300a5100ba78068805661b93a5c&#125;</code></p>
<h3 id="Misc-假如给我三天光明"><a href="#Misc-假如给我三天光明" class="headerlink" title="Misc-假如给我三天光明"></a><a class="link"   href="https://buuoj.cn/challenges#%E5%81%87%E5%A6%82%E7%BB%99%E6%88%91%E4%B8%89%E5%A4%A9%E5%85%89%E6%98%8E" >Misc-假如给我三天光明 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>解压文件，得到一个压缩文件<code>music.zip</code>和一张图片<code>pic.jpg</code></p>
<p>打开图片，发现下面有一排 $2 \times 3$ 点阵图，猜测是盲文</p>
<p>查询盲文表并解密，得到<code>kmdonowg</code></p>
<p>尝试以此为密码解压文件，发现解压不成功</p>
<p>通过<code>binwalk</code>指令扫描文件，提示这是一个<code>rar</code>文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/假如给我三天光明]</span><br><span class="line">└─$ binwalk music.zip </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             RAR archive data, version 4.x, first volume <span class="built_in">type</span>: MAIN_HEAD</span><br></pre></td></tr></table></figure></div>

<p>将文件名改为<code>music.rar</code>，以<code>kmdonowg</code>为密码尝试再次解压</p>
<p>得到一个音频文件，使用<code>Audacity</code>打开文件，获得一段摩斯电码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-.-. - ..-. .-- .--. . .. ----- ---.. --... ...-- ..--- ..--.. ..--- ...-- -.. --..</span><br></pre></td></tr></table></figure></div>

<p>通过摩斯电码转换器获得</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CTFWPEI08732?23DZ</span><br></pre></td></tr></table></figure></div>

<p>进而获得<code>flag&#123;wepi08732?23dz&#125;</code></p>
<h3 id="Misc-rar"><a href="#Misc-rar" class="headerlink" title="Misc-rar"></a><a class="link"   href="https://buuoj.cn/challenges#rar" >Misc-rar <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>根据题目提示，我们使用<code>rarcrack</code>命令暴力破解下载获得的文件</p>
<p>首先设置<code>&lt;filename&gt;.xml</code>配置文件</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rarcrack</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">abc</span>&gt;</span>0123456789<span class="tag">&lt;/<span class="name">abc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">current</span>&gt;</span>0000<span class="tag">&lt;/<span class="name">current</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">good_password</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rarcrack</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>再使用命令破解</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(hervey㉿Hervey)-[~/Downloads/Misc/rar]</span><br><span class="line">└─$ rarcrack dianli_jbctf_MISC_T10076_20150707_rar.rar --threads 20 --<span class="built_in">type</span> rar</span><br><span class="line">RarCrack! 0.2 by David Zoltan Kedves (kedazo@gmail.com)</span><br><span class="line"></span><br><span class="line">INFO: number of threads adjusted to 12</span><br><span class="line">INFO: the specified archive <span class="built_in">type</span>: rar</span><br><span class="line">INFO: cracking dianli_jbctf_MISC_T10076_20150707_rar.rar, status file: dianli_jbctf_MISC_T10076_20150707_rar.rar.xml</span><br><span class="line">INFO: Resuming cracking from password: <span class="string">&#x27;0000&#x27;</span></span><br><span class="line">Probing: <span class="string">&#x27;1488&#x27;</span> [492 pwds/sec]</span><br><span class="line">Probing: <span class="string">&#x27;3120&#x27;</span> [544 pwds/sec]</span><br><span class="line">Probing: <span class="string">&#x27;4724&#x27;</span> [534 pwds/sec]</span><br><span class="line">Probing: <span class="string">&#x27;6313&#x27;</span> [529 pwds/sec]</span><br><span class="line">Probing: <span class="string">&#x27;7947&#x27;</span> [544 pwds/sec]</span><br><span class="line">GOOD: password cracked: <span class="string">&#x27;8795&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>解压获得<code>flag.txt</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;1773c5da790bd3caff38e3decd180eb7&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
</search>
