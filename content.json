{"meta":{"title":"Hervey's Blog","subtitle":"","description":"","author":"Hervey","url":"http://herveyb3b4.github.io","root":"/"},"pages":[{"title":"about","date":"2023-09-22T16:00:00.000Z","updated":"2023-10-30T18:29:20.447Z","comments":true,"path":"about/index.html","permalink":"http://herveyb3b4.github.io/about/index.html","excerpt":"","text":"欢迎大佬们参观我的Blog 本人浙江工业大学软件工程专业本科生在读 一个非常普通的ACMer"},{"title":"Links","date":"2023-10-30T23:59:14.000Z","updated":"2023-10-31T00:00:49.187Z","comments":true,"path":"links/index.html","permalink":"http://herveyb3b4.github.io/links/index.html","excerpt":"","text":""},{"title":"categories","date":"2023-10-30T11:36:37.000Z","updated":"2023-10-30T18:29:20.451Z","comments":true,"path":"categories/index.html","permalink":"http://herveyb3b4.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-10-30T11:36:49.000Z","updated":"2023-10-30T18:29:20.461Z","comments":true,"path":"tags/index.html","permalink":"http://herveyb3b4.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"安装Kali WSL","slug":"How-to-install-Kali-WSL","date":"2023-11-30T15:00:50.000Z","updated":"2023-12-02T10:39:34.875Z","comments":true,"path":"2023/11/30/How-to-install-Kali-WSL/","link":"","permalink":"http://herveyb3b4.github.io/2023/11/30/How-to-install-Kali-WSL/","excerpt":"","text":"引言Kali WSL（Windows Subsystem for Linux）是在 Windows 环境下运行 Kali Linux 的一种方式，同时，WSL相比于Linux虚拟机能和Windows较好的进行文件系统的互通，非常适合用于学习。 步骤1. 开启 WSL 功能确保系统为 Windows 10 专业版，然后按照以下步骤开启 WSL 功能： 打开控制面板 进入程序 -&gt; 启用或关闭 Windows 功能 勾选”适用于 Linux 的 Windows 子系统” 系统更新并重启生效 2. 安装 Kali WSL在 Windows 应用商店中搜索并下载适用于 Linux 的 Windows 子系统，选择 Kali 作为 Linux 发行版进行安装。 3. 升级到 WSL2由于版本问题，确保升级到 WSL2，执行以下命令： 1dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart wsl --set-version kali-linux 2 4. 安装完整版 Kali安装完成后，打开 Kali Linux ，根据设置用户名及密码。 重新启动 Kali Linux ，这时我们发现我们的 Kali Linux 还有很多工具没用安装。 执行以下命令安装 Kali 的完整版： 12sudo apt updatesudo apt install -y kali-linux-large 6. 配置图形化桌面并连接（可选）如果想要体验图形化界面，可以选择安装 Win-KeX 1sudo apt install -y kali-win-kex 7. 额外配置（可选）根据需求，可以配置 Windows Terminal，将 Kali 和 Win-KeX 整合进 Terminal。 以下是我的配置文件(仅留下 Kali WSL 相关配置) 1234567891011121314151617181920212223&#123; &quot;profiles&quot;: &#123; &quot;list&quot;: [ &#123; &quot;guid&quot;: &quot;&#123;46ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;Kali Linux&quot;, &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;, &quot;startingDirectory&quot; : &quot;//wsl$/kali-linux/home/username&quot; &#125;, //以下为Win-Kex的配置 &#123; &quot;guid&quot;: &quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d3&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;Win-KeX&quot;, &quot;commandline&quot;: &quot;wsl -d kali-linux kex --wtstart -s&quot;, &quot;startingDirectory&quot; : &quot;//wsl$/kali-linux/home/username&quot; &#125; ] &#125;&#125;","categories":[{"name":"环境配置","slug":"环境配置","permalink":"http://herveyb3b4.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://herveyb3b4.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"Go语言获得Cravatar头像服务网址","slug":"Go-use-cravatar","date":"2023-09-29T16:04:40.000Z","updated":"2023-10-30T18:28:36.133Z","comments":true,"path":"2023/09/30/Go-use-cravatar/","link":"","permalink":"http://herveyb3b4.github.io/2023/09/30/Go-use-cravatar/","excerpt":"","text":"Cravatar真是个好东西 这是Cravatar图像请求的Go语言实现，具体的加密方式请查阅这里 123456789101112131415161718192021package mainimport ( &quot;crypto/md5&quot; &quot;fmt&quot; &quot;strings&quot;)// Hash值获取方式 先删除前导和尾随的空格，再将所有字符置为小写，最后进行MD5加密func Hash(email string) [16]byte &#123; return md5.Sum([]byte(strings.ToLower(strings.TrimFunc(email, func(r rune) bool &#123; return r == &#x27; &#x27; &#125;))))&#125;// 头像获取地址为 https://cravatar.cn/avatar/&#123;HASH&#125;func EmailToCravatarURL(email string) string &#123; return fmt.Sprintf(&quot;https://cravatar.cn/avatar/%x&quot;, Hash(email))&#125;// 试试效果！func main() &#123; fmt.Print(EmailToCravatarURL(&#123;Your email here&#125;))&#125;","categories":[{"name":"后端","slug":"后端","permalink":"http://herveyb3b4.github.io/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://herveyb3b4.github.io/tags/Go/"},{"name":"头像服务","slug":"头像服务","permalink":"http://herveyb3b4.github.io/tags/%E5%A4%B4%E5%83%8F%E6%9C%8D%E5%8A%A1/"}]},{"title":"如何使用Navicat连接WSL里的MySQL服务","slug":"How-to-use-Navicat-to-connect-to-MySQL-services-in-WSL","date":"2023-08-02T15:06:50.000Z","updated":"2023-10-30T18:28:36.146Z","comments":true,"path":"2023/08/02/How-to-use-Navicat-to-connect-to-MySQL-services-in-WSL/","link":"","permalink":"http://herveyb3b4.github.io/2023/08/02/How-to-use-Navicat-to-connect-to-MySQL-services-in-WSL/","excerpt":"","text":"0 前言真的有人会干这么套娃的事情吗？ 原来是我啊，那没事了 究其原因，还是由于之前技术不精，在Windows系统上安装MySQL，结果MySQL炸了，而且还没办法卸载干净，这次想着既然VSCode可以与WSL连接，为何Navicat不能与WSL里的MySQL连接呢？ 而且照XCloudFance 学长的说法：“你可以把WSL想象是里面的一台电脑，你的Windows也是一台独立的电脑”，那么navicat理论上应该可以与WSL中的MySQL连接。 于是，痛苦的两个小时配置之旅就开始了(中途还重装了一次WSL qwq) 1 前期准备1.1 安装Navicat自行Baidu&#x2F;Google&#x2F;Bing下载安装包 安装包打开后一路next即可 1.2 安装WSLBaidu&#x2F;Google&#x2F;Bing **注意:**记得将WSL版本设置为WSL2，本人使用的系统是Ubuntu22.04 1.3 在WSL中安装MySQL在WSL终端中输入 1sudo apt install mysql-server 即可，root及其余账户密码配置请自行百度 2 正式开始吧！2.1 找到WSL的IP地址首先，我们应该让Windows主机能够访问WSL，那么我们就应该先知道WSL的本地IP访问地址。 在Windows下打开终端(Power Shell)，使用如下命令查询： 1ipconfig 可以看到这样一行提示： 1234567以太网适配器 vEthernet (WSL): 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::85d4:3cdb:df1f:f6e1%42 IPv4 地址 . . . . . . . . . . . . : 172.30.224.1 子网掩码 . . . . . . . . . . . . : 255.255.240.0 默认网关. . . . . . . . . . . . . : 说明主机其实是能够访问到WSL的。 在WSL的终端中，使用ifconfig查询本地IP地址 1ifconfig 有可能需要使用如下指令安装net-tools： 1sudo apt install net-tools 安装成功后，运行ifconfig会输出类似下面的结果： 1234567891011121314151617eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 172.30.224.99 netmask 255.255.240.0 broadcast 172.30.239.255 inet6 fe80::215:5dff:fe99:f76a prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:15:5d:99:f7:6a txqueuelen 1000 (Ethernet) RX packets 104254 bytes 266388818 (266.3 MB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 69925 bytes 5218621 (5.2 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt; loop txqueuelen 1000 (Local Loopback) RX packets 5644 bytes 29799099 (29.7 MB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 5644 bytes 29799099 (29.7 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 第二行的172.30.224.99便是你的WSL的本地IP地址。 2.2 设置MySQL被局域网访问这时我们可以试着用Navicat连接一下刚才获得IP地址的WSL的MySQL服务，发现Navicat显示连接失败，这是因为我们未设置MySQL能被局域网访问。 进入MySQL中，修改账户的访问权限： 123456mysql -u root -p &lt;password&gt;mysql-&gt;use mysqlmysql-&gt;update user set host = &#x27;%&#x27; where user =&#x27;root&#x27;;mysql-&gt;grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; with grant option;mysql-&gt;flush privileges;mysql-&gt;exit; 找到MySQL的配置文件进行修改: 1sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf 在mysqld.cnf中，找到这样一行配置： 1bind-address = 127.0.0.1 修改为： 1bind-address = 0.0.0.0 保存后重启MySQL： 1sudo /etc/init.d/mysql restart 可以通过netstat -aptn检查MySQL的状态 12345(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)Active Internet connections (servers and established)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN - 2.3 设置Ubuntu防火墙此时我们还是无法连接，还需关闭Ubuntu的防火墙 1sudo ufw enable #开启 在WSL环境下，可能会得到如下提示： 123456789101112131415161718192021222324Traceback (most recent call last): File &quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;, line 427, in under_ssh ppid = get_ppid(pid) File &quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;, line 421, in get_ppid return int(ppid)ValueError: invalid literal for int() with base 10: &#x27;S&#x27;During handling of the above exception, another exception occurred:Traceback (most recent call last): File &quot;/usr/sbin/ufw&quot;, line 138, in &lt;module&gt; not ui.continue_under_ssh(): File &quot;/usr/lib/python3/dist-packages/ufw/frontend.py&quot;, line 901, in continue_under_ssh if self.backend.do_checks and ufw.util.under_ssh(): # pragma: no cover File &quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;, line 457, in under_ssh return under_ssh(ppid) File &quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;, line 457, in under_ssh return under_ssh(ppid) File &quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;, line 457, in under_ssh return under_ssh(ppid) [Previous line repeated 1 more time] File &quot;/usr/lib/python3/dist-packages/ufw/util.py&quot;, line 434, in under_ssh raise ValueError(err_msg)ValueError: Couldn&#x27;t find parent pid for &#x27;3129&#x27; 这是因为/usr/lib/python3/dist-packages/ufw/util.py中有一行Python出现错误 更正方法是进入中： 1sudo vim /usr/lib/python3/dist-packages/ufw/util.py 将 1ppid = open(name).readlines()[0].split(&#x27;)&#x27;)[1].split()[1] 改为 1ppid = open(name).readlines()[0].rsplit(&#x27;)&#x27;,1)[1].split()[1] 即可 之后添加允许访问的端口3306并重载生效即可 12sudo ufw allow 3306sudo ufw reload 完成后查看 1sudo ufw status 得到如下结果即为成功 123456Status: activeTo Action From-- ------ ----3306 ALLOW Anywhere3306 (v6) ALLOW Anywhere (v6) 这时再使用Navicat访问，即可连接上WSL的MySQL服务。","categories":[{"name":"环境配置","slug":"环境配置","permalink":"http://herveyb3b4.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://herveyb3b4.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"博客搭建教程","slug":"Build-Your-Blog","date":"2020-08-13T04:57:01.000Z","updated":"2023-10-31T01:01:18.996Z","comments":true,"path":"2020/08/13/Build-Your-Blog/","link":"","permalink":"http://herveyb3b4.github.io/2020/08/13/Build-Your-Blog/","excerpt":"","text":"0 前言建这个博客踩了好多坑QWQ 1 安装1.1 安装Git和Node.js这没什么好说的吧… 安装完成后打开cmd通过以下两行命令检测是否安装成功 12git --versionnpm --version 1.2 更换国内镜像源如果您觉得网速够快可以选择跳过此步 1npm config set registry https://registry.npm.taobao.org 1.3 安装Hexo上一步不做的话这一步会慢得让你怀疑人生 1npm install -g hexo-cli 2 创建2.1 创建本地Blog新建一个空文件夹并进入 右键 -&gt; “Git Bash Here” 输入以下命令 1hexo init 2.2 进行本地预览继续在命令行中输入下列代码 12hexo ghexo s 之后进入打开浏览器http://localhost:4000 就可以查看自己的Blog了 3 美化3.1 下载主题在GitHub 中查找hexo-theme 选择一个自己喜欢的主题并clone或下载zip包解压到主目录&#x2F;themes中 3.1.1 yilia这里以yilia 为例 1git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 3.1.2 Material 注意:使用Material主题最好用1.5.2版，最新版会一直报错 这里以Material 为例 12cd themesgit clone https://github.com/viosey/hexo-theme-material.git material 3.1.3 Fluid 以下引用自Fluid官方文档 Hexo 5.0.0 版本以上，推荐通过 npm 直接安装 1npm install --save hexo-theme-fluid 3.2 使用主题3.2.1 yilia修改主目录下的 _config.yml 文件的 theme值为yilia。 1theme: yilia 复制 themes&#x2F;yilia 目录下_config.template.yml 为 _config.yml 3.2.2 Material修改主目录下的 _config.yml 文件的 theme值为material。 1theme: material 复制 themes&#x2F;material 目录下_config.template.yml 为 _config.yml 3.2.3 Fluid修改主目录下的 _config.yml 文件的 theme值为fluid。 1theme: fluid 然后在博客目录下创建 _config.fluid.yml，将主题的 _config.yml 内容复制进去。 3.3 更改语言修改主目录下的 _config.yml 文件的 language值为zh-CN。 1language: zh-CN 3.4 站内搜索3.4.1 yilia &#x2F; Material安装 hexo-generator-search 插件。 1npm install hexo-generator-searchdb --save 修改theme&#x2F;主题名 目录 _config.yml 中的 search值 123search: use: local swiftype_key: 然后在主目录的_config.yml文件中添加 123search: path: search.xml field: all 3.4.2 Fluid修改主目录的 _config.fluid.yml 中的 search值 123456789101112131415161718192021# 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件# Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index filessearch: enable: true # 搜索索引文件的路径，可以是相对路径或外站的绝对路径 # Path for search index file, it can be a relative path or an absolute path path: /local-search.xml # 文件生成在本地的位置，必须是相对路径 # The location where the index file is generated locally, it must be a relative location generate_path: /local-search.xml # 搜索的范围 # Search field # Options: post | page | all field: post # 搜索是否扫描正文 # If true, search will scan the post content content: true 4 部署到前一步本地的博客基本上就建好了，接下来就是将其部署在服务器上 4.1 连接Git仓库首先在GitHub 注册一个账号,建立用户名.github.io的项目 接着打开Git Bash，输入下列命令 12git config --global user.name &quot;用户名&quot;git config --global user.email &quot;注册邮箱&quot; 4.2 添加密钥在Git Bash中继续输入下列命令生成SSH密钥 1ssh-keygen -t rsa -C &quot;注册邮箱&quot; 查看密钥 1cat ~/.ssh/id_rsa.pub 将输出的内容复制到SSH and GPG keys 里 4.3 提交部署安装hexo-deployer-git 1npm install hexo-deployer-git --save 配置主目录的_config.yml文件 1234deploy: type: git repo: 仓库地址 branch: master 部署到GitHub 1hexo d 访问https:&#x2F;&#x2F;用户名.github.io&#x2F;","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://herveyb3b4.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://herveyb3b4.github.io/tags/%E9%9A%8F%E7%AC%94/"}]}],"categories":[{"name":"环境配置","slug":"环境配置","permalink":"http://herveyb3b4.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"name":"后端","slug":"后端","permalink":"http://herveyb3b4.github.io/categories/%E5%90%8E%E7%AB%AF/"},{"name":"博客搭建","slug":"博客搭建","permalink":"http://herveyb3b4.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://herveyb3b4.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"Go","slug":"Go","permalink":"http://herveyb3b4.github.io/tags/Go/"},{"name":"头像服务","slug":"头像服务","permalink":"http://herveyb3b4.github.io/tags/%E5%A4%B4%E5%83%8F%E6%9C%8D%E5%8A%A1/"}]}